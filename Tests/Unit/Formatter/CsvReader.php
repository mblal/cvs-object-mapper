<?php


namespace MBL\CSVRWBundle\Tests\Unit\Formatter;


use MBL\CSVRWBundle\Formatter\AbstractCsvReader;
use MBL\CSVRWBundle\Tests\Unit\CsvReaderTestCase;
use MBL\CSVRWBundle\Tests\Unit\Entity\Address;
use MBL\CSVRWBundle\Tests\Unit\Entity\Employee;
use MBL\CSVRWBundle\Tests\Unit\Entity\School;
use MBL\CSVRWBundle\Tests\Util\Reflector;

class CsvReader extends CsvReaderTestCase
{
    protected $cvsFormatterCaseOne;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->cvsFormatterCaseOne = new class extends AbstractCsvReader {
            public function getHeader()
            {
                return array(
                    'lastname' => 'lastname',
                    'age' => 'age',
                    'degree'=> 'degree',
                    'job'=> 'job',
                    'school_name'=> 'school.name',
                    'school_category'=> 'school.category',
                    'school_address' => 'school.address.zipCode',
                    'firstname' => 'firstname'
                );
            }
        };
    }
    public function testGetObjectModel()
    {
        $employee = new Employee();
        $school = new School();
        $address = new Address();

        Reflector::setValue($address, 'zipCode', 11000);

        $school->name = 'IGA';
        $school->category = ' Software engineering';
        $school->address = $address;

        Reflector::setValue($employee, 'firstname', 'mohamed');
        Reflector::setValue($employee,'lastname','blal');
        Reflector::setValue($employee, 'age', 31);
        Reflector::setValue($employee, 'degree','engineer');
        Reflector::setValue($employee, 'job' ,'software industry');
        Reflector::setValue($employee, 'school', $school);

        $file = $this->getFile();
        $modelEntrypoint = $this->getModelEntrypoint();
        $result = $this->cvsFormatterCaseOne->getObjectModel($file, $modelEntrypoint);

        foreach ($result as $element){
            $this->assertInstanceOf('MBL\CSVRWBundle\Tests\Unit\Entity\Employee', $element);
            $this->assertInstanceOf('MBL\CSVRWBundle\Tests\Unit\Entity\School', $element->school);
            $this->assertInstanceOf('MBL\CSVRWBundle\Tests\Unit\Entity\Address', $element->school->address);

            $this->assertEquals('mohamed', Reflector::getValue($element, 'firstname'));
            $this->assertEquals('blal', $element->lastname);
            $this->assertEquals(31, $element->age);
            $this->assertEquals('engineer', $element->degree);
            $this->assertEquals('software industry', $element->job);
            $this->assertEquals('IGA', $element->school->name);
            $this->assertEquals(11000, $element->school->address->zipCode);
        }
    }
}