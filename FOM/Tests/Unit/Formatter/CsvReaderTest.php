<?php


namespace FOM\Tests\Unit\Formatter;


use FOM\Formatter\AbstractCsvReader;
use FOM\Tests\Unit\CsvReaderTestCase;
use FOM\Tests\Unit\Entity\Address;
use FOM\Tests\Unit\Entity\Employee;
use FOM\Tests\Unit\Entity\School;
use FOM\Tests\Util\Reflector;

class CsvReaderTest extends CsvReaderTestCase
{
    protected $cvsFormatterCaseOne;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->cvsFormatterCaseOne = new class extends AbstractCsvReader {
            public function getHeader()
            {
                return array(
                    'lastname' => 'lastname',
                    'age' => 'age',
                    'degree'=> 'degree',
                    'job'=> 'job',
                    'school_name'=> 'school.name',
                    'school_category'=> 'school.category',
                    'school_address' => 'school.address.zipCode',
                    'firstname' => 'firstname'
                );
            }
        };
    }

    /**
     * @dataProvider getTargetModelFixture
     */
    public function testGetObjectModel($employee, $index)
    {
        $file = $this->getFile();
        $modelEntrypoint = $this->getModelEntrypoint();
        $result = $this->cvsFormatterCaseOne->getObjectModel($file, $modelEntrypoint);


            $this->assertInstanceOf('FOM\Tests\Unit\Entity\Employee', $result[$index]);
            $this->assertInstanceOf('FOM\Tests\Unit\Entity\School', $result[$index]->school);
            $this->assertInstanceOf('FOM\Tests\Unit\Entity\Address', $result[$index]->school->address);

            $this->assertEquals($employee->getFirstname(), Reflector::getValue($result[$index], 'firstname'));
            $this->assertEquals($employee->getLastname(), $result[$index]->lastname);
            $this->assertEquals($employee->getAge(), $result[$index]->age);
            $this->assertEquals($employee->getDegree(), $result[$index]->degree);
            $this->assertEquals($employee->getJob(), $result[$index]->job);
            $this->assertEquals($employee->school->getName(), $result[$index]->school->name);
            $this->assertEquals($employee->school->address->zipCode, $result[$index]->school->address->zipCode);
    }

    public function getTargetModelFixture(){
        $employee1 = new Employee();
        $school1 = new School();
        $address1 = new Address();

        Reflector::setValue($address1, 'zipCode', 11000);

        $school1->name = 'IGA';
        $school1->category = ' Software engineering';
        $school1->address = $address1;

        Reflector::setValue($employee1, 'firstname', 'mohamed');
        Reflector::setValue($employee1,'lastname','blal');
        Reflector::setValue($employee1, 'age', 31);
        Reflector::setValue($employee1, 'degree','engineer');
        Reflector::setValue($employee1, 'job' ,'software industry');
        Reflector::setValue($employee1, 'school', $school1);

        $employee2 = new Employee();
        $school2 = new School();
        $address2 = new Address();

        Reflector::setValue($address2, 'zipCode', 12000);

        $school2->name = 'INPT';
        $school2->category = 'Telecom & Software engineering';
        $school2->address = $address2;

        Reflector::setValue($employee2, 'firstname', 'Taha');
        Reflector::setValue($employee2,'lastname','Id Boubker');
        Reflector::setValue($employee2, 'age', 29);
        Reflector::setValue($employee2, 'degree','engineer');
        Reflector::setValue($employee2, 'job' ,'software industry');
        Reflector::setValue($employee2, 'school', $school2);

        yield [$employee1, 0];
        yield [$employee2, 1];
    }
}